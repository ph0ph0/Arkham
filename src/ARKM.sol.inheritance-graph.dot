digraph "" {
OwnableUpgradeable -> Initializable [ label="1" ];
OwnableUpgradeable -> ContextUpgradeable [ label="2" ];
OwnableUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>OwnableUpgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    owner()</TD></TR><TR><TD align="left">    renounceOwnership()</TD></TR><TR><TD align="left">    transferOwnership(address)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __Ownable_init()</TD></TR><TR><TD align="left">    __Ownable_init_unchained()</TD></TR><TR><TD align="left">    _checkOwner()</TD></TR><TR><TD align="left">    _transferOwnership(address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyOwner()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _owner</TD></TR><TR><TD align="left"><font color="red">    __gap</font></TD></TR></TABLE> >];

IERC1967Upgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC1967Upgradeable</B></TD></TR></TABLE> >];

IERC1822ProxiableUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC1822ProxiableUpgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    proxiableUUID()</TD></TR></TABLE> >];

ERC1967UpgradeUpgradeable -> Initializable [ label="1" ];
ERC1967UpgradeUpgradeable -> IERC1967Upgradeable [ label="2" ];
ERC1967UpgradeUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC1967UpgradeUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __ERC1967Upgrade_init()</TD></TR><TR><TD align="left">    __ERC1967Upgrade_init_unchained()</TD></TR><TR><TD align="left">    _getImplementation()</TD></TR><TR><TD align="left">    _setImplementation(address)</TD></TR><TR><TD align="left">    _upgradeTo(address)</TD></TR><TR><TD align="left">    _upgradeToAndCall(address,bytes,bool)</TD></TR><TR><TD align="left">    _upgradeToAndCallUUPS(address,bytes,bool)</TD></TR><TR><TD align="left">    _getAdmin()</TD></TR><TR><TD align="left">    _setAdmin(address)</TD></TR><TR><TD align="left">    _changeAdmin(address)</TD></TR><TR><TD align="left">    _getBeacon()</TD></TR><TR><TD align="left">    _setBeacon(address)</TD></TR><TR><TD align="left">    _upgradeBeaconToAndCall(address,bytes,bool)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _ROLLBACK_SLOT</TD></TR><TR><TD align="left">    _IMPLEMENTATION_SLOT</TD></TR><TR><TD align="left">    _ADMIN_SLOT</TD></TR><TR><TD align="left">    _BEACON_SLOT</TD></TR><TR><TD align="left">    __gap</TD></TR></TABLE> >];

IBeaconUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IBeaconUpgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    implementation()</TD></TR></TABLE> >];

Initializable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Initializable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _disableInitializers()</TD></TR><TR><TD align="left">    _getInitializedVersion()</TD></TR><TR><TD align="left">    _isInitializing()</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    initializer()</TD></TR><TR><TD align="left">    reinitializer(uint8)</TD></TR><TR><TD align="left">    onlyInitializing()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _initialized</TD></TR><TR><TD align="left">    _initializing</TD></TR></TABLE> >];

UUPSUpgradeable -> Initializable [ label="1" ];
UUPSUpgradeable -> IERC1822ProxiableUpgradeable [ label="2" ];
UUPSUpgradeable -> ERC1967UpgradeUpgradeable [ label="3" ];
UUPSUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>UUPSUpgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    proxiableUUID()</font></TD></TR><TR><TD align="left">    upgradeTo(address)</TD></TR><TR><TD align="left">    upgradeToAndCall(address,bytes)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __UUPSUpgradeable_init()</TD></TR><TR><TD align="left">    __UUPSUpgradeable_init_unchained()</TD></TR><TR><TD align="left">    _authorizeUpgrade(address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyProxy()</TD></TR><TR><TD align="left">    notDelegated()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    __self</TD></TR><TR><TD align="left"><font color="red">    __gap</font></TD></TR></TABLE> >];

PausableUpgradeable -> Initializable [ label="1" ];
PausableUpgradeable -> ContextUpgradeable [ label="2" ];
PausableUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>PausableUpgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    paused()</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __Pausable_init()</TD></TR><TR><TD align="left">    __Pausable_init_unchained()</TD></TR><TR><TD align="left">    _requireNotPaused()</TD></TR><TR><TD align="left">    _requirePaused()</TD></TR><TR><TD align="left">    _pause()</TD></TR><TR><TD align="left">    _unpause()</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    whenNotPaused()</TD></TR><TR><TD align="left">    whenPaused()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _paused</TD></TR><TR><TD align="left"><font color="red">    __gap</font></TD></TR></TABLE> >];

ERC20Upgradeable -> Initializable [ label="1" ];
ERC20Upgradeable -> ContextUpgradeable [ label="2" ];
ERC20Upgradeable -> IERC20Upgradeable [ label="3" ];
ERC20Upgradeable -> IERC20MetadataUpgradeable [ label="4" ];
ERC20Upgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC20Upgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    name()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    symbol()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    decimals()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    totalSupply()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    balanceOf(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transfer(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    allowance(address,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    approve(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transferFrom(address,address,uint256)</font></TD></TR><TR><TD align="left">    increaseAllowance(address,uint256)</TD></TR><TR><TD align="left">    decreaseAllowance(address,uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __ERC20_init(string,string)</TD></TR><TR><TD align="left">    __ERC20_init_unchained(string,string)</TD></TR><TR><TD align="left">    _transfer(address,address,uint256)</TD></TR><TR><TD align="left">    _mint(address,uint256)</TD></TR><TR><TD align="left">    _burn(address,uint256)</TD></TR><TR><TD align="left">    _approve(address,address,uint256)</TD></TR><TR><TD align="left">    _spendAllowance(address,address,uint256)</TD></TR><TR><TD align="left">    _beforeTokenTransfer(address,address,uint256)</TD></TR><TR><TD align="left">    _afterTokenTransfer(address,address,uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _balances</TD></TR><TR><TD align="left">    _allowances</TD></TR><TR><TD align="left">    _totalSupply</TD></TR><TR><TD align="left">    _name</TD></TR><TR><TD align="left">    _symbol</TD></TR><TR><TD align="left"><font color="red">    __gap</font></TD></TR></TABLE> >];

IERC20Upgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20Upgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    totalSupply()</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    allowance(address,address)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR></TABLE> >];

ERC20BurnableUpgradeable -> Initializable [ label="1" ];
ERC20BurnableUpgradeable -> ContextUpgradeable [ label="2" ];
ERC20BurnableUpgradeable -> ERC20Upgradeable [ label="3" ];
ERC20BurnableUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC20BurnableUpgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    burn(uint256)</TD></TR><TR><TD align="left">    burnFrom(address,uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __ERC20Burnable_init()</TD></TR><TR><TD align="left">    __ERC20Burnable_init_unchained()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left"><font color="red">    __gap</font></TD></TR></TABLE> >];

IERC20MetadataUpgradeable -> IERC20Upgradeable;
IERC20MetadataUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20MetadataUpgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    name()</TD></TR><TR><TD align="left">    symbol()</TD></TR><TR><TD align="left">    decimals()</TD></TR></TABLE> >];

AddressUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>AddressUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    isContract(address)</TD></TR><TR><TD align="left">    sendValue(address,uint256)</TD></TR><TR><TD align="left">    functionCall(address,bytes)</TD></TR><TR><TD align="left">    functionCall(address,bytes,string)</TD></TR><TR><TD align="left">    functionCallWithValue(address,bytes,uint256)</TD></TR><TR><TD align="left">    functionCallWithValue(address,bytes,uint256,string)</TD></TR><TR><TD align="left">    functionStaticCall(address,bytes)</TD></TR><TR><TD align="left">    functionStaticCall(address,bytes,string)</TD></TR><TR><TD align="left">    functionDelegateCall(address,bytes)</TD></TR><TR><TD align="left">    functionDelegateCall(address,bytes,string)</TD></TR><TR><TD align="left">    verifyCallResultFromTarget(address,bool,bytes,string)</TD></TR><TR><TD align="left">    verifyCallResult(bool,bytes,string)</TD></TR><TR><TD align="left">    _revert(bytes,string)</TD></TR></TABLE> >];

ContextUpgradeable -> Initializable;
ContextUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ContextUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __Context_init()</TD></TR><TR><TD align="left">    __Context_init_unchained()</TD></TR><TR><TD align="left">    _msgSender()</TD></TR><TR><TD align="left">    _msgData()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    __gap</TD></TR></TABLE> >];

StorageSlotUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>StorageSlotUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    getAddressSlot(bytes32)</TD></TR><TR><TD align="left">    getBooleanSlot(bytes32)</TD></TR><TR><TD align="left">    getBytes32Slot(bytes32)</TD></TR><TR><TD align="left">    getUint256Slot(bytes32)</TD></TR><TR><TD align="left">    getStringSlot(bytes32)</TD></TR><TR><TD align="left">    getStringSlot(string)</TD></TR><TR><TD align="left">    getBytesSlot(bytes32)</TD></TR><TR><TD align="left">    getBytesSlot(bytes)</TD></TR></TABLE> >];

ARKM -> Initializable [ label="1" ];
ARKM -> ERC20Upgradeable [ label="2" ];
ARKM -> ERC20BurnableUpgradeable [ label="3" ];
ARKM -> PausableUpgradeable [ label="4" ];
ARKM -> OwnableUpgradeable [ label="5" ];
ARKM -> UUPSUpgradeable [ label="6" ];
ARKM[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ARKM</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    initialize()</TD></TR><TR><TD align="left">    pause()</TD></TR><TR><TD align="left">    unpause()</TD></TR><TR><TD align="left">    mint(address,uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    _beforeTokenTransfer(address,address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    _authorizeUpgrade(address)</font></TD></TR></TABLE> >];

}